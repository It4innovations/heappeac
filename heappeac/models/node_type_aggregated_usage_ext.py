# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v2  # noqa: E501

    OpenAPI spec version: v2
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NodeTypeAggregatedUsageExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_node_type': 'ClusterNodeTypeExt',
        'submitted_tasks': 'list[SubmittedTaskInfoExtendedUsageReportExt]',
        'total_corehours_usage': 'float'
    }

    attribute_map = {
        'cluster_node_type': 'ClusterNodeType',
        'submitted_tasks': 'SubmittedTasks',
        'total_corehours_usage': 'TotalCorehoursUsage'
    }

    def __init__(self, cluster_node_type=None, submitted_tasks=None, total_corehours_usage=None):  # noqa: E501
        """NodeTypeAggregatedUsageExt - a model defined in Swagger"""  # noqa: E501
        self._cluster_node_type = None
        self._submitted_tasks = None
        self._total_corehours_usage = None
        self.discriminator = None
        if cluster_node_type is not None:
            self.cluster_node_type = cluster_node_type
        if submitted_tasks is not None:
            self.submitted_tasks = submitted_tasks
        if total_corehours_usage is not None:
            self.total_corehours_usage = total_corehours_usage

    @property
    def cluster_node_type(self):
        """Gets the cluster_node_type of this NodeTypeAggregatedUsageExt.  # noqa: E501


        :return: The cluster_node_type of this NodeTypeAggregatedUsageExt.  # noqa: E501
        :rtype: ClusterNodeTypeExt
        """
        return self._cluster_node_type

    @cluster_node_type.setter
    def cluster_node_type(self, cluster_node_type):
        """Sets the cluster_node_type of this NodeTypeAggregatedUsageExt.


        :param cluster_node_type: The cluster_node_type of this NodeTypeAggregatedUsageExt.  # noqa: E501
        :type: ClusterNodeTypeExt
        """

        self._cluster_node_type = cluster_node_type

    @property
    def submitted_tasks(self):
        """Gets the submitted_tasks of this NodeTypeAggregatedUsageExt.  # noqa: E501


        :return: The submitted_tasks of this NodeTypeAggregatedUsageExt.  # noqa: E501
        :rtype: list[SubmittedTaskInfoExtendedUsageReportExt]
        """
        return self._submitted_tasks

    @submitted_tasks.setter
    def submitted_tasks(self, submitted_tasks):
        """Sets the submitted_tasks of this NodeTypeAggregatedUsageExt.


        :param submitted_tasks: The submitted_tasks of this NodeTypeAggregatedUsageExt.  # noqa: E501
        :type: list[SubmittedTaskInfoExtendedUsageReportExt]
        """

        self._submitted_tasks = submitted_tasks

    @property
    def total_corehours_usage(self):
        """Gets the total_corehours_usage of this NodeTypeAggregatedUsageExt.  # noqa: E501


        :return: The total_corehours_usage of this NodeTypeAggregatedUsageExt.  # noqa: E501
        :rtype: float
        """
        return self._total_corehours_usage

    @total_corehours_usage.setter
    def total_corehours_usage(self, total_corehours_usage):
        """Sets the total_corehours_usage of this NodeTypeAggregatedUsageExt.


        :param total_corehours_usage: The total_corehours_usage of this NodeTypeAggregatedUsageExt.  # noqa: E501
        :type: float
        """

        self._total_corehours_usage = total_corehours_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeTypeAggregatedUsageExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeTypeAggregatedUsageExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
