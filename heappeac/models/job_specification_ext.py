# coding: utf-8

"""
    HEAppE Web API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobSpecificationExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'min_cores': 'int',
        'max_cores': 'int',
        'priority': 'int',
        'project': 'str',
        'waiting_limit': 'int',
        'walltime_limit': 'int',
        'notification_email': 'str',
        'phone_number': 'str',
        'notify_on_abort': 'bool',
        'notify_on_finish': 'bool',
        'notify_on_start': 'bool',
        'cluster_node_type_id': 'int',
        'environment_variables': 'list[EnvironmentVariableExt]',
        'tasks': 'list[TaskSpecificationExt]'
    }

    attribute_map = {
        'name': 'name',
        'min_cores': 'minCores',
        'max_cores': 'maxCores',
        'priority': 'priority',
        'project': 'project',
        'waiting_limit': 'waitingLimit',
        'walltime_limit': 'walltimeLimit',
        'notification_email': 'notificationEmail',
        'phone_number': 'phoneNumber',
        'notify_on_abort': 'notifyOnAbort',
        'notify_on_finish': 'notifyOnFinish',
        'notify_on_start': 'notifyOnStart',
        'cluster_node_type_id': 'clusterNodeTypeId',
        'environment_variables': 'environmentVariables',
        'tasks': 'tasks'
    }

    def __init__(self, name=None, min_cores=None, max_cores=None, priority=None, project=None, waiting_limit=None, walltime_limit=None, notification_email=None, phone_number=None, notify_on_abort=None, notify_on_finish=None, notify_on_start=None, cluster_node_type_id=None, environment_variables=None, tasks=None):  # noqa: E501
        """JobSpecificationExt - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._min_cores = None
        self._max_cores = None
        self._priority = None
        self._project = None
        self._waiting_limit = None
        self._walltime_limit = None
        self._notification_email = None
        self._phone_number = None
        self._notify_on_abort = None
        self._notify_on_finish = None
        self._notify_on_start = None
        self._cluster_node_type_id = None
        self._environment_variables = None
        self._tasks = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if min_cores is not None:
            self.min_cores = min_cores
        if max_cores is not None:
            self.max_cores = max_cores
        if priority is not None:
            self.priority = priority
        if project is not None:
            self.project = project
        if waiting_limit is not None:
            self.waiting_limit = waiting_limit
        if walltime_limit is not None:
            self.walltime_limit = walltime_limit
        if notification_email is not None:
            self.notification_email = notification_email
        if phone_number is not None:
            self.phone_number = phone_number
        if notify_on_abort is not None:
            self.notify_on_abort = notify_on_abort
        if notify_on_finish is not None:
            self.notify_on_finish = notify_on_finish
        if notify_on_start is not None:
            self.notify_on_start = notify_on_start
        if cluster_node_type_id is not None:
            self.cluster_node_type_id = cluster_node_type_id
        if environment_variables is not None:
            self.environment_variables = environment_variables
        if tasks is not None:
            self.tasks = tasks

    @property
    def name(self):
        """Gets the name of this JobSpecificationExt.  # noqa: E501


        :return: The name of this JobSpecificationExt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobSpecificationExt.


        :param name: The name of this JobSpecificationExt.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def min_cores(self):
        """Gets the min_cores of this JobSpecificationExt.  # noqa: E501


        :return: The min_cores of this JobSpecificationExt.  # noqa: E501
        :rtype: int
        """
        return self._min_cores

    @min_cores.setter
    def min_cores(self, min_cores):
        """Sets the min_cores of this JobSpecificationExt.


        :param min_cores: The min_cores of this JobSpecificationExt.  # noqa: E501
        :type: int
        """

        self._min_cores = min_cores

    @property
    def max_cores(self):
        """Gets the max_cores of this JobSpecificationExt.  # noqa: E501


        :return: The max_cores of this JobSpecificationExt.  # noqa: E501
        :rtype: int
        """
        return self._max_cores

    @max_cores.setter
    def max_cores(self, max_cores):
        """Sets the max_cores of this JobSpecificationExt.


        :param max_cores: The max_cores of this JobSpecificationExt.  # noqa: E501
        :type: int
        """

        self._max_cores = max_cores

    @property
    def priority(self):
        """Gets the priority of this JobSpecificationExt.  # noqa: E501


        :return: The priority of this JobSpecificationExt.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobSpecificationExt.


        :param priority: The priority of this JobSpecificationExt.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def project(self):
        """Gets the project of this JobSpecificationExt.  # noqa: E501


        :return: The project of this JobSpecificationExt.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this JobSpecificationExt.


        :param project: The project of this JobSpecificationExt.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def waiting_limit(self):
        """Gets the waiting_limit of this JobSpecificationExt.  # noqa: E501


        :return: The waiting_limit of this JobSpecificationExt.  # noqa: E501
        :rtype: int
        """
        return self._waiting_limit

    @waiting_limit.setter
    def waiting_limit(self, waiting_limit):
        """Sets the waiting_limit of this JobSpecificationExt.


        :param waiting_limit: The waiting_limit of this JobSpecificationExt.  # noqa: E501
        :type: int
        """

        self._waiting_limit = waiting_limit

    @property
    def walltime_limit(self):
        """Gets the walltime_limit of this JobSpecificationExt.  # noqa: E501


        :return: The walltime_limit of this JobSpecificationExt.  # noqa: E501
        :rtype: int
        """
        return self._walltime_limit

    @walltime_limit.setter
    def walltime_limit(self, walltime_limit):
        """Sets the walltime_limit of this JobSpecificationExt.


        :param walltime_limit: The walltime_limit of this JobSpecificationExt.  # noqa: E501
        :type: int
        """

        self._walltime_limit = walltime_limit

    @property
    def notification_email(self):
        """Gets the notification_email of this JobSpecificationExt.  # noqa: E501


        :return: The notification_email of this JobSpecificationExt.  # noqa: E501
        :rtype: str
        """
        return self._notification_email

    @notification_email.setter
    def notification_email(self, notification_email):
        """Sets the notification_email of this JobSpecificationExt.


        :param notification_email: The notification_email of this JobSpecificationExt.  # noqa: E501
        :type: str
        """

        self._notification_email = notification_email

    @property
    def phone_number(self):
        """Gets the phone_number of this JobSpecificationExt.  # noqa: E501


        :return: The phone_number of this JobSpecificationExt.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this JobSpecificationExt.


        :param phone_number: The phone_number of this JobSpecificationExt.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def notify_on_abort(self):
        """Gets the notify_on_abort of this JobSpecificationExt.  # noqa: E501


        :return: The notify_on_abort of this JobSpecificationExt.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_abort

    @notify_on_abort.setter
    def notify_on_abort(self, notify_on_abort):
        """Sets the notify_on_abort of this JobSpecificationExt.


        :param notify_on_abort: The notify_on_abort of this JobSpecificationExt.  # noqa: E501
        :type: bool
        """

        self._notify_on_abort = notify_on_abort

    @property
    def notify_on_finish(self):
        """Gets the notify_on_finish of this JobSpecificationExt.  # noqa: E501


        :return: The notify_on_finish of this JobSpecificationExt.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_finish

    @notify_on_finish.setter
    def notify_on_finish(self, notify_on_finish):
        """Sets the notify_on_finish of this JobSpecificationExt.


        :param notify_on_finish: The notify_on_finish of this JobSpecificationExt.  # noqa: E501
        :type: bool
        """

        self._notify_on_finish = notify_on_finish

    @property
    def notify_on_start(self):
        """Gets the notify_on_start of this JobSpecificationExt.  # noqa: E501


        :return: The notify_on_start of this JobSpecificationExt.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_start

    @notify_on_start.setter
    def notify_on_start(self, notify_on_start):
        """Sets the notify_on_start of this JobSpecificationExt.


        :param notify_on_start: The notify_on_start of this JobSpecificationExt.  # noqa: E501
        :type: bool
        """

        self._notify_on_start = notify_on_start

    @property
    def cluster_node_type_id(self):
        """Gets the cluster_node_type_id of this JobSpecificationExt.  # noqa: E501


        :return: The cluster_node_type_id of this JobSpecificationExt.  # noqa: E501
        :rtype: int
        """
        return self._cluster_node_type_id

    @cluster_node_type_id.setter
    def cluster_node_type_id(self, cluster_node_type_id):
        """Sets the cluster_node_type_id of this JobSpecificationExt.


        :param cluster_node_type_id: The cluster_node_type_id of this JobSpecificationExt.  # noqa: E501
        :type: int
        """

        self._cluster_node_type_id = cluster_node_type_id

    @property
    def environment_variables(self):
        """Gets the environment_variables of this JobSpecificationExt.  # noqa: E501


        :return: The environment_variables of this JobSpecificationExt.  # noqa: E501
        :rtype: list[EnvironmentVariableExt]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this JobSpecificationExt.


        :param environment_variables: The environment_variables of this JobSpecificationExt.  # noqa: E501
        :type: list[EnvironmentVariableExt]
        """

        self._environment_variables = environment_variables

    @property
    def tasks(self):
        """Gets the tasks of this JobSpecificationExt.  # noqa: E501


        :return: The tasks of this JobSpecificationExt.  # noqa: E501
        :rtype: list[TaskSpecificationExt]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this JobSpecificationExt.


        :param tasks: The tasks of this JobSpecificationExt.  # noqa: E501
        :type: list[TaskSpecificationExt]
        """

        self._tasks = tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSpecificationExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSpecificationExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
