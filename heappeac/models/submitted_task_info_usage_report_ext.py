# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v2  # noqa: E501

    OpenAPI spec version: v2
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SubmittedTaskInfoUsageReportExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'priority': 'TaskPriorityExt',
        'state': 'TaskStateExt',
        'cpu_hyper_threading': 'bool',
        'scheduled_job_id': 'str',
        'command_template_id': 'int',
        'allocated_time': 'float',
        'corehours_usage': 'float',
        'start_time': 'datetime',
        'end_time': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'priority': 'Priority',
        'state': 'State',
        'cpu_hyper_threading': 'CpuHyperThreading',
        'scheduled_job_id': 'ScheduledJobId',
        'command_template_id': 'CommandTemplateId',
        'allocated_time': 'AllocatedTime',
        'corehours_usage': 'CorehoursUsage',
        'start_time': 'StartTime',
        'end_time': 'EndTime'
    }

    def __init__(self, id=None, name=None, priority=None, state=None, cpu_hyper_threading=None, scheduled_job_id=None, command_template_id=None, allocated_time=None, corehours_usage=None, start_time=None, end_time=None):  # noqa: E501
        """SubmittedTaskInfoUsageReportExt - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._priority = None
        self._state = None
        self._cpu_hyper_threading = None
        self._scheduled_job_id = None
        self._command_template_id = None
        self._allocated_time = None
        self._corehours_usage = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if state is not None:
            self.state = state
        if cpu_hyper_threading is not None:
            self.cpu_hyper_threading = cpu_hyper_threading
        if scheduled_job_id is not None:
            self.scheduled_job_id = scheduled_job_id
        if command_template_id is not None:
            self.command_template_id = command_template_id
        if allocated_time is not None:
            self.allocated_time = allocated_time
        if corehours_usage is not None:
            self.corehours_usage = corehours_usage
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def id(self):
        """Gets the id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmittedTaskInfoUsageReportExt.


        :param id: The id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The name of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubmittedTaskInfoUsageReportExt.


        :param name: The name of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The priority of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: TaskPriorityExt
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SubmittedTaskInfoUsageReportExt.


        :param priority: The priority of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: TaskPriorityExt
        """

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The state of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: TaskStateExt
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubmittedTaskInfoUsageReportExt.


        :param state: The state of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: TaskStateExt
        """

        self._state = state

    @property
    def cpu_hyper_threading(self):
        """Gets the cpu_hyper_threading of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The cpu_hyper_threading of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: bool
        """
        return self._cpu_hyper_threading

    @cpu_hyper_threading.setter
    def cpu_hyper_threading(self, cpu_hyper_threading):
        """Sets the cpu_hyper_threading of this SubmittedTaskInfoUsageReportExt.


        :param cpu_hyper_threading: The cpu_hyper_threading of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: bool
        """

        self._cpu_hyper_threading = cpu_hyper_threading

    @property
    def scheduled_job_id(self):
        """Gets the scheduled_job_id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The scheduled_job_id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_job_id

    @scheduled_job_id.setter
    def scheduled_job_id(self, scheduled_job_id):
        """Sets the scheduled_job_id of this SubmittedTaskInfoUsageReportExt.


        :param scheduled_job_id: The scheduled_job_id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: str
        """

        self._scheduled_job_id = scheduled_job_id

    @property
    def command_template_id(self):
        """Gets the command_template_id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The command_template_id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: int
        """
        return self._command_template_id

    @command_template_id.setter
    def command_template_id(self, command_template_id):
        """Sets the command_template_id of this SubmittedTaskInfoUsageReportExt.


        :param command_template_id: The command_template_id of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: int
        """

        self._command_template_id = command_template_id

    @property
    def allocated_time(self):
        """Gets the allocated_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The allocated_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: float
        """
        return self._allocated_time

    @allocated_time.setter
    def allocated_time(self, allocated_time):
        """Sets the allocated_time of this SubmittedTaskInfoUsageReportExt.


        :param allocated_time: The allocated_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: float
        """

        self._allocated_time = allocated_time

    @property
    def corehours_usage(self):
        """Gets the corehours_usage of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The corehours_usage of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: float
        """
        return self._corehours_usage

    @corehours_usage.setter
    def corehours_usage(self, corehours_usage):
        """Sets the corehours_usage of this SubmittedTaskInfoUsageReportExt.


        :param corehours_usage: The corehours_usage of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: float
        """

        self._corehours_usage = corehours_usage

    @property
    def start_time(self):
        """Gets the start_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The start_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SubmittedTaskInfoUsageReportExt.


        :param start_time: The start_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501


        :return: The end_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SubmittedTaskInfoUsageReportExt.


        :param end_time: The end_time of this SubmittedTaskInfoUsageReportExt.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmittedTaskInfoUsageReportExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmittedTaskInfoUsageReportExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
