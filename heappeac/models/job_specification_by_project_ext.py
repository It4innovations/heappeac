# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.0.0  # noqa: E501

    OpenAPI spec version: v4.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobSpecificationByProjectExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'waiting_limit': 'int',
        'walltime_limit': 'int',
        'notification_email': 'str',
        'phone_number': 'str',
        'notify_on_abort': 'bool',
        'notify_on_finish': 'bool',
        'notify_on_start': 'bool',
        'cluster_id': 'int',
        'file_transfer_method_id': 'int',
        'is_extra_long': 'bool',
        'environment_variables': 'list[EnvironmentVariableExt]',
        'tasks': 'list[TaskSpecificationExt]',
        'project_id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'waiting_limit': 'WaitingLimit',
        'walltime_limit': 'WalltimeLimit',
        'notification_email': 'NotificationEmail',
        'phone_number': 'PhoneNumber',
        'notify_on_abort': 'NotifyOnAbort',
        'notify_on_finish': 'NotifyOnFinish',
        'notify_on_start': 'NotifyOnStart',
        'cluster_id': 'ClusterId',
        'file_transfer_method_id': 'FileTransferMethodId',
        'is_extra_long': 'IsExtraLong',
        'environment_variables': 'EnvironmentVariables',
        'tasks': 'Tasks',
        'project_id': 'ProjectId'
    }

    def __init__(self, name=None, waiting_limit=None, walltime_limit=None, notification_email=None, phone_number=None, notify_on_abort=None, notify_on_finish=None, notify_on_start=None, cluster_id=None, file_transfer_method_id=None, is_extra_long=None, environment_variables=None, tasks=None, project_id=None):  # noqa: E501
        """JobSpecificationByProjectExt - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._waiting_limit = None
        self._walltime_limit = None
        self._notification_email = None
        self._phone_number = None
        self._notify_on_abort = None
        self._notify_on_finish = None
        self._notify_on_start = None
        self._cluster_id = None
        self._file_transfer_method_id = None
        self._is_extra_long = None
        self._environment_variables = None
        self._tasks = None
        self._project_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if waiting_limit is not None:
            self.waiting_limit = waiting_limit
        if walltime_limit is not None:
            self.walltime_limit = walltime_limit
        if notification_email is not None:
            self.notification_email = notification_email
        if phone_number is not None:
            self.phone_number = phone_number
        if notify_on_abort is not None:
            self.notify_on_abort = notify_on_abort
        if notify_on_finish is not None:
            self.notify_on_finish = notify_on_finish
        if notify_on_start is not None:
            self.notify_on_start = notify_on_start
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if file_transfer_method_id is not None:
            self.file_transfer_method_id = file_transfer_method_id
        if is_extra_long is not None:
            self.is_extra_long = is_extra_long
        if environment_variables is not None:
            self.environment_variables = environment_variables
        if tasks is not None:
            self.tasks = tasks
        if project_id is not None:
            self.project_id = project_id

    @property
    def name(self):
        """Gets the name of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The name of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobSpecificationByProjectExt.


        :param name: The name of this JobSpecificationByProjectExt.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def waiting_limit(self):
        """Gets the waiting_limit of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The waiting_limit of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: int
        """
        return self._waiting_limit

    @waiting_limit.setter
    def waiting_limit(self, waiting_limit):
        """Sets the waiting_limit of this JobSpecificationByProjectExt.


        :param waiting_limit: The waiting_limit of this JobSpecificationByProjectExt.  # noqa: E501
        :type: int
        """

        self._waiting_limit = waiting_limit

    @property
    def walltime_limit(self):
        """Gets the walltime_limit of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The walltime_limit of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: int
        """
        return self._walltime_limit

    @walltime_limit.setter
    def walltime_limit(self, walltime_limit):
        """Sets the walltime_limit of this JobSpecificationByProjectExt.


        :param walltime_limit: The walltime_limit of this JobSpecificationByProjectExt.  # noqa: E501
        :type: int
        """

        self._walltime_limit = walltime_limit

    @property
    def notification_email(self):
        """Gets the notification_email of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The notification_email of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: str
        """
        return self._notification_email

    @notification_email.setter
    def notification_email(self, notification_email):
        """Sets the notification_email of this JobSpecificationByProjectExt.


        :param notification_email: The notification_email of this JobSpecificationByProjectExt.  # noqa: E501
        :type: str
        """

        self._notification_email = notification_email

    @property
    def phone_number(self):
        """Gets the phone_number of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The phone_number of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this JobSpecificationByProjectExt.


        :param phone_number: The phone_number of this JobSpecificationByProjectExt.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def notify_on_abort(self):
        """Gets the notify_on_abort of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The notify_on_abort of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_abort

    @notify_on_abort.setter
    def notify_on_abort(self, notify_on_abort):
        """Sets the notify_on_abort of this JobSpecificationByProjectExt.


        :param notify_on_abort: The notify_on_abort of this JobSpecificationByProjectExt.  # noqa: E501
        :type: bool
        """

        self._notify_on_abort = notify_on_abort

    @property
    def notify_on_finish(self):
        """Gets the notify_on_finish of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The notify_on_finish of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_finish

    @notify_on_finish.setter
    def notify_on_finish(self, notify_on_finish):
        """Sets the notify_on_finish of this JobSpecificationByProjectExt.


        :param notify_on_finish: The notify_on_finish of this JobSpecificationByProjectExt.  # noqa: E501
        :type: bool
        """

        self._notify_on_finish = notify_on_finish

    @property
    def notify_on_start(self):
        """Gets the notify_on_start of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The notify_on_start of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_start

    @notify_on_start.setter
    def notify_on_start(self, notify_on_start):
        """Sets the notify_on_start of this JobSpecificationByProjectExt.


        :param notify_on_start: The notify_on_start of this JobSpecificationByProjectExt.  # noqa: E501
        :type: bool
        """

        self._notify_on_start = notify_on_start

    @property
    def cluster_id(self):
        """Gets the cluster_id of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The cluster_id of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this JobSpecificationByProjectExt.


        :param cluster_id: The cluster_id of this JobSpecificationByProjectExt.  # noqa: E501
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def file_transfer_method_id(self):
        """Gets the file_transfer_method_id of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The file_transfer_method_id of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: int
        """
        return self._file_transfer_method_id

    @file_transfer_method_id.setter
    def file_transfer_method_id(self, file_transfer_method_id):
        """Sets the file_transfer_method_id of this JobSpecificationByProjectExt.


        :param file_transfer_method_id: The file_transfer_method_id of this JobSpecificationByProjectExt.  # noqa: E501
        :type: int
        """

        self._file_transfer_method_id = file_transfer_method_id

    @property
    def is_extra_long(self):
        """Gets the is_extra_long of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The is_extra_long of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: bool
        """
        return self._is_extra_long

    @is_extra_long.setter
    def is_extra_long(self, is_extra_long):
        """Sets the is_extra_long of this JobSpecificationByProjectExt.


        :param is_extra_long: The is_extra_long of this JobSpecificationByProjectExt.  # noqa: E501
        :type: bool
        """

        self._is_extra_long = is_extra_long

    @property
    def environment_variables(self):
        """Gets the environment_variables of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The environment_variables of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: list[EnvironmentVariableExt]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this JobSpecificationByProjectExt.


        :param environment_variables: The environment_variables of this JobSpecificationByProjectExt.  # noqa: E501
        :type: list[EnvironmentVariableExt]
        """

        self._environment_variables = environment_variables

    @property
    def tasks(self):
        """Gets the tasks of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The tasks of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: list[TaskSpecificationExt]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this JobSpecificationByProjectExt.


        :param tasks: The tasks of this JobSpecificationByProjectExt.  # noqa: E501
        :type: list[TaskSpecificationExt]
        """

        self._tasks = tasks

    @property
    def project_id(self):
        """Gets the project_id of this JobSpecificationByProjectExt.  # noqa: E501


        :return: The project_id of this JobSpecificationByProjectExt.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this JobSpecificationByProjectExt.


        :param project_id: The project_id of this JobSpecificationByProjectExt.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSpecificationByProjectExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSpecificationByProjectExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
