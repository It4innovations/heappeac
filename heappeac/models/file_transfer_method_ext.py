# coding: utf-8

"""
    HEAppE Web API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FileTransferMethodExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_hostname': 'str',
        'shared_basepath': 'str',
        'protocol': 'int',
        'credentials': 'AsymmetricKeyCredentialsExt'
    }

    attribute_map = {
        'server_hostname': 'serverHostname',
        'shared_basepath': 'sharedBasepath',
        'protocol': 'protocol',
        'credentials': 'credentials'
    }

    def __init__(self, server_hostname=None, shared_basepath=None, protocol=None, credentials=None):  # noqa: E501
        """FileTransferMethodExt - a model defined in Swagger"""  # noqa: E501
        self._server_hostname = None
        self._shared_basepath = None
        self._protocol = None
        self._credentials = None
        self.discriminator = None
        if server_hostname is not None:
            self.server_hostname = server_hostname
        if shared_basepath is not None:
            self.shared_basepath = shared_basepath
        if protocol is not None:
            self.protocol = protocol
        if credentials is not None:
            self.credentials = credentials

    @property
    def server_hostname(self):
        """Gets the server_hostname of this FileTransferMethodExt.  # noqa: E501


        :return: The server_hostname of this FileTransferMethodExt.  # noqa: E501
        :rtype: str
        """
        return self._server_hostname

    @server_hostname.setter
    def server_hostname(self, server_hostname):
        """Sets the server_hostname of this FileTransferMethodExt.


        :param server_hostname: The server_hostname of this FileTransferMethodExt.  # noqa: E501
        :type: str
        """

        self._server_hostname = server_hostname

    @property
    def shared_basepath(self):
        """Gets the shared_basepath of this FileTransferMethodExt.  # noqa: E501


        :return: The shared_basepath of this FileTransferMethodExt.  # noqa: E501
        :rtype: str
        """
        return self._shared_basepath

    @shared_basepath.setter
    def shared_basepath(self, shared_basepath):
        """Sets the shared_basepath of this FileTransferMethodExt.


        :param shared_basepath: The shared_basepath of this FileTransferMethodExt.  # noqa: E501
        :type: str
        """

        self._shared_basepath = shared_basepath

    @property
    def protocol(self):
        """Gets the protocol of this FileTransferMethodExt.  # noqa: E501


        :return: The protocol of this FileTransferMethodExt.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this FileTransferMethodExt.


        :param protocol: The protocol of this FileTransferMethodExt.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def credentials(self):
        """Gets the credentials of this FileTransferMethodExt.  # noqa: E501


        :return: The credentials of this FileTransferMethodExt.  # noqa: E501
        :rtype: AsymmetricKeyCredentialsExt
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this FileTransferMethodExt.


        :param credentials: The credentials of this FileTransferMethodExt.  # noqa: E501
        :type: AsymmetricKeyCredentialsExt
        """

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileTransferMethodExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileTransferMethodExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
