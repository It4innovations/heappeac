# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.0  # noqa: E501

    OpenAPI spec version: v4.2.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'project': 'Project',
        'contact_id': 'int',
        'contact': 'Contact',
        'is_pi': 'bool'
    }

    attribute_map = {
        'project_id': 'ProjectId',
        'project': 'Project',
        'contact_id': 'ContactId',
        'contact': 'Contact',
        'is_pi': 'IsPI'
    }

    def __init__(self, project_id=None, project=None, contact_id=None, contact=None, is_pi=None):  # noqa: E501
        """ProjectContact - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._project = None
        self._contact_id = None
        self._contact = None
        self._is_pi = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if project is not None:
            self.project = project
        if contact_id is not None:
            self.contact_id = contact_id
        if contact is not None:
            self.contact = contact
        self.is_pi = is_pi

    @property
    def project_id(self):
        """Gets the project_id of this ProjectContact.  # noqa: E501


        :return: The project_id of this ProjectContact.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectContact.


        :param project_id: The project_id of this ProjectContact.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project(self):
        """Gets the project of this ProjectContact.  # noqa: E501


        :return: The project of this ProjectContact.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectContact.


        :param project: The project of this ProjectContact.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def contact_id(self):
        """Gets the contact_id of this ProjectContact.  # noqa: E501


        :return: The contact_id of this ProjectContact.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this ProjectContact.


        :param contact_id: The contact_id of this ProjectContact.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def contact(self):
        """Gets the contact of this ProjectContact.  # noqa: E501


        :return: The contact of this ProjectContact.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ProjectContact.


        :param contact: The contact of this ProjectContact.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def is_pi(self):
        """Gets the is_pi of this ProjectContact.  # noqa: E501


        :return: The is_pi of this ProjectContact.  # noqa: E501
        :rtype: bool
        """
        return self._is_pi

    @is_pi.setter
    def is_pi(self, is_pi):
        """Sets the is_pi of this ProjectContact.


        :param is_pi: The is_pi of this ProjectContact.  # noqa: E501
        :type: bool
        """
        if is_pi is None:
            raise ValueError("Invalid value for `is_pi`, must not be `None`")  # noqa: E501

        self._is_pi = is_pi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
