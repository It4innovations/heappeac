# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.1  # noqa: E501

    OpenAPI spec version: v4.2.1
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'master_node_name': 'str',
        'domain_name': 'str',
        'port': 'int',
        'time_zone': 'str',
        'update_job_state_by_service_account': 'bool',
        'scheduler_type': 'SchedulerType',
        'connection_protocol': 'ClusterConnectionProtocol',
        'node_types': 'list[ClusterNodeType]',
        'file_transfer_methods': 'list[FileTransferMethod]',
        'proxy_connection_id': 'int',
        'proxy_connection': 'ClusterProxyConnection',
        'cluster_projects': 'list[ClusterProject]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'master_node_name': 'MasterNodeName',
        'domain_name': 'DomainName',
        'port': 'Port',
        'time_zone': 'TimeZone',
        'update_job_state_by_service_account': 'UpdateJobStateByServiceAccount',
        'scheduler_type': 'SchedulerType',
        'connection_protocol': 'ConnectionProtocol',
        'node_types': 'NodeTypes',
        'file_transfer_methods': 'FileTransferMethods',
        'proxy_connection_id': 'ProxyConnectionId',
        'proxy_connection': 'ProxyConnection',
        'cluster_projects': 'ClusterProjects'
    }

    def __init__(self, id=None, name=None, description=None, master_node_name=None, domain_name=None, port=None, time_zone=None, update_job_state_by_service_account=None, scheduler_type=None, connection_protocol=None, node_types=None, file_transfer_methods=None, proxy_connection_id=None, proxy_connection=None, cluster_projects=None):  # noqa: E501
        """Cluster - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._master_node_name = None
        self._domain_name = None
        self._port = None
        self._time_zone = None
        self._update_job_state_by_service_account = None
        self._scheduler_type = None
        self._connection_protocol = None
        self._node_types = None
        self._file_transfer_methods = None
        self._proxy_connection_id = None
        self._proxy_connection = None
        self._cluster_projects = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.description = description
        self.master_node_name = master_node_name
        if domain_name is not None:
            self.domain_name = domain_name
        if port is not None:
            self.port = port
        self.time_zone = time_zone
        if update_job_state_by_service_account is not None:
            self.update_job_state_by_service_account = update_job_state_by_service_account
        if scheduler_type is not None:
            self.scheduler_type = scheduler_type
        if connection_protocol is not None:
            self.connection_protocol = connection_protocol
        if node_types is not None:
            self.node_types = node_types
        if file_transfer_methods is not None:
            self.file_transfer_methods = file_transfer_methods
        if proxy_connection_id is not None:
            self.proxy_connection_id = proxy_connection_id
        if proxy_connection is not None:
            self.proxy_connection = proxy_connection
        if cluster_projects is not None:
            self.cluster_projects = cluster_projects

    @property
    def id(self):
        """Gets the id of this Cluster.  # noqa: E501


        :return: The id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cluster.


        :param id: The id of this Cluster.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Cluster.  # noqa: E501


        :return: The name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Cluster.  # noqa: E501


        :return: The description of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Cluster.


        :param description: The description of this Cluster.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def master_node_name(self):
        """Gets the master_node_name of this Cluster.  # noqa: E501


        :return: The master_node_name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._master_node_name

    @master_node_name.setter
    def master_node_name(self, master_node_name):
        """Sets the master_node_name of this Cluster.


        :param master_node_name: The master_node_name of this Cluster.  # noqa: E501
        :type: str
        """
        if master_node_name is None:
            raise ValueError("Invalid value for `master_node_name`, must not be `None`")  # noqa: E501

        self._master_node_name = master_node_name

    @property
    def domain_name(self):
        """Gets the domain_name of this Cluster.  # noqa: E501


        :return: The domain_name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Cluster.


        :param domain_name: The domain_name of this Cluster.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def port(self):
        """Gets the port of this Cluster.  # noqa: E501


        :return: The port of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Cluster.


        :param port: The port of this Cluster.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def time_zone(self):
        """Gets the time_zone of this Cluster.  # noqa: E501


        :return: The time_zone of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Cluster.


        :param time_zone: The time_zone of this Cluster.  # noqa: E501
        :type: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")  # noqa: E501

        self._time_zone = time_zone

    @property
    def update_job_state_by_service_account(self):
        """Gets the update_job_state_by_service_account of this Cluster.  # noqa: E501


        :return: The update_job_state_by_service_account of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._update_job_state_by_service_account

    @update_job_state_by_service_account.setter
    def update_job_state_by_service_account(self, update_job_state_by_service_account):
        """Sets the update_job_state_by_service_account of this Cluster.


        :param update_job_state_by_service_account: The update_job_state_by_service_account of this Cluster.  # noqa: E501
        :type: bool
        """

        self._update_job_state_by_service_account = update_job_state_by_service_account

    @property
    def scheduler_type(self):
        """Gets the scheduler_type of this Cluster.  # noqa: E501


        :return: The scheduler_type of this Cluster.  # noqa: E501
        :rtype: SchedulerType
        """
        return self._scheduler_type

    @scheduler_type.setter
    def scheduler_type(self, scheduler_type):
        """Sets the scheduler_type of this Cluster.


        :param scheduler_type: The scheduler_type of this Cluster.  # noqa: E501
        :type: SchedulerType
        """

        self._scheduler_type = scheduler_type

    @property
    def connection_protocol(self):
        """Gets the connection_protocol of this Cluster.  # noqa: E501


        :return: The connection_protocol of this Cluster.  # noqa: E501
        :rtype: ClusterConnectionProtocol
        """
        return self._connection_protocol

    @connection_protocol.setter
    def connection_protocol(self, connection_protocol):
        """Sets the connection_protocol of this Cluster.


        :param connection_protocol: The connection_protocol of this Cluster.  # noqa: E501
        :type: ClusterConnectionProtocol
        """

        self._connection_protocol = connection_protocol

    @property
    def node_types(self):
        """Gets the node_types of this Cluster.  # noqa: E501


        :return: The node_types of this Cluster.  # noqa: E501
        :rtype: list[ClusterNodeType]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this Cluster.


        :param node_types: The node_types of this Cluster.  # noqa: E501
        :type: list[ClusterNodeType]
        """

        self._node_types = node_types

    @property
    def file_transfer_methods(self):
        """Gets the file_transfer_methods of this Cluster.  # noqa: E501


        :return: The file_transfer_methods of this Cluster.  # noqa: E501
        :rtype: list[FileTransferMethod]
        """
        return self._file_transfer_methods

    @file_transfer_methods.setter
    def file_transfer_methods(self, file_transfer_methods):
        """Sets the file_transfer_methods of this Cluster.


        :param file_transfer_methods: The file_transfer_methods of this Cluster.  # noqa: E501
        :type: list[FileTransferMethod]
        """

        self._file_transfer_methods = file_transfer_methods

    @property
    def proxy_connection_id(self):
        """Gets the proxy_connection_id of this Cluster.  # noqa: E501


        :return: The proxy_connection_id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._proxy_connection_id

    @proxy_connection_id.setter
    def proxy_connection_id(self, proxy_connection_id):
        """Sets the proxy_connection_id of this Cluster.


        :param proxy_connection_id: The proxy_connection_id of this Cluster.  # noqa: E501
        :type: int
        """

        self._proxy_connection_id = proxy_connection_id

    @property
    def proxy_connection(self):
        """Gets the proxy_connection of this Cluster.  # noqa: E501


        :return: The proxy_connection of this Cluster.  # noqa: E501
        :rtype: ClusterProxyConnection
        """
        return self._proxy_connection

    @proxy_connection.setter
    def proxy_connection(self, proxy_connection):
        """Sets the proxy_connection of this Cluster.


        :param proxy_connection: The proxy_connection of this Cluster.  # noqa: E501
        :type: ClusterProxyConnection
        """

        self._proxy_connection = proxy_connection

    @property
    def cluster_projects(self):
        """Gets the cluster_projects of this Cluster.  # noqa: E501


        :return: The cluster_projects of this Cluster.  # noqa: E501
        :rtype: list[ClusterProject]
        """
        return self._cluster_projects

    @cluster_projects.setter
    def cluster_projects(self, cluster_projects):
        """Sets the cluster_projects of this Cluster.


        :param cluster_projects: The cluster_projects of this Cluster.  # noqa: E501
        :type: list[ClusterProject]
        """

        self._cluster_projects = cluster_projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
