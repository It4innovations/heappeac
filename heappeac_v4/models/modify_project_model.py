# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.0  # noqa: E501

    OpenAPI spec version: v4.2.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModifyProjectModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_code': 'str',
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'usage_type': 'UsageTypeExt',
        'use_accounting_string_for_scheduler': 'bool'
    }

    attribute_map = {
        'session_code': 'SessionCode',
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'usage_type': 'UsageType',
        'use_accounting_string_for_scheduler': 'UseAccountingStringForScheduler'
    }

    def __init__(self, session_code=None, id=None, name=None, description=None, start_date=None, end_date=None, usage_type=None, use_accounting_string_for_scheduler=None):  # noqa: E501
        """ModifyProjectModel - a model defined in Swagger"""  # noqa: E501
        self._session_code = None
        self._id = None
        self._name = None
        self._description = None
        self._start_date = None
        self._end_date = None
        self._usage_type = None
        self._use_accounting_string_for_scheduler = None
        self.discriminator = None
        if session_code is not None:
            self.session_code = session_code
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if usage_type is not None:
            self.usage_type = usage_type
        if use_accounting_string_for_scheduler is not None:
            self.use_accounting_string_for_scheduler = use_accounting_string_for_scheduler

    @property
    def session_code(self):
        """Gets the session_code of this ModifyProjectModel.  # noqa: E501


        :return: The session_code of this ModifyProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._session_code

    @session_code.setter
    def session_code(self, session_code):
        """Sets the session_code of this ModifyProjectModel.


        :param session_code: The session_code of this ModifyProjectModel.  # noqa: E501
        :type: str
        """

        self._session_code = session_code

    @property
    def id(self):
        """Gets the id of this ModifyProjectModel.  # noqa: E501


        :return: The id of this ModifyProjectModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModifyProjectModel.


        :param id: The id of this ModifyProjectModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModifyProjectModel.  # noqa: E501


        :return: The name of this ModifyProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModifyProjectModel.


        :param name: The name of this ModifyProjectModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ModifyProjectModel.  # noqa: E501


        :return: The description of this ModifyProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModifyProjectModel.


        :param description: The description of this ModifyProjectModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_date(self):
        """Gets the start_date of this ModifyProjectModel.  # noqa: E501


        :return: The start_date of this ModifyProjectModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ModifyProjectModel.


        :param start_date: The start_date of this ModifyProjectModel.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ModifyProjectModel.  # noqa: E501


        :return: The end_date of this ModifyProjectModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ModifyProjectModel.


        :param end_date: The end_date of this ModifyProjectModel.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def usage_type(self):
        """Gets the usage_type of this ModifyProjectModel.  # noqa: E501


        :return: The usage_type of this ModifyProjectModel.  # noqa: E501
        :rtype: UsageTypeExt
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this ModifyProjectModel.


        :param usage_type: The usage_type of this ModifyProjectModel.  # noqa: E501
        :type: UsageTypeExt
        """

        self._usage_type = usage_type

    @property
    def use_accounting_string_for_scheduler(self):
        """Gets the use_accounting_string_for_scheduler of this ModifyProjectModel.  # noqa: E501


        :return: The use_accounting_string_for_scheduler of this ModifyProjectModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_accounting_string_for_scheduler

    @use_accounting_string_for_scheduler.setter
    def use_accounting_string_for_scheduler(self, use_accounting_string_for_scheduler):
        """Sets the use_accounting_string_for_scheduler of this ModifyProjectModel.


        :param use_accounting_string_for_scheduler: The use_accounting_string_for_scheduler of this ModifyProjectModel.  # noqa: E501
        :type: bool
        """

        self._use_accounting_string_for_scheduler = use_accounting_string_for_scheduler

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyProjectModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyProjectModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
