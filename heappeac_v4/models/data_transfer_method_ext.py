# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.1  # noqa: E501

    OpenAPI spec version: v4.2.1
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataTransferMethodExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'submitted_task_id': 'int',
        'port': 'int',
        'node_ip_address': 'str',
        'node_port': 'int'
    }

    attribute_map = {
        'submitted_task_id': 'SubmittedTaskId',
        'port': 'Port',
        'node_ip_address': 'NodeIPAddress',
        'node_port': 'NodePort'
    }

    def __init__(self, submitted_task_id=None, port=None, node_ip_address=None, node_port=None):  # noqa: E501
        """DataTransferMethodExt - a model defined in Swagger"""  # noqa: E501
        self._submitted_task_id = None
        self._port = None
        self._node_ip_address = None
        self._node_port = None
        self.discriminator = None
        if submitted_task_id is not None:
            self.submitted_task_id = submitted_task_id
        if port is not None:
            self.port = port
        if node_ip_address is not None:
            self.node_ip_address = node_ip_address
        if node_port is not None:
            self.node_port = node_port

    @property
    def submitted_task_id(self):
        """Gets the submitted_task_id of this DataTransferMethodExt.  # noqa: E501


        :return: The submitted_task_id of this DataTransferMethodExt.  # noqa: E501
        :rtype: int
        """
        return self._submitted_task_id

    @submitted_task_id.setter
    def submitted_task_id(self, submitted_task_id):
        """Sets the submitted_task_id of this DataTransferMethodExt.


        :param submitted_task_id: The submitted_task_id of this DataTransferMethodExt.  # noqa: E501
        :type: int
        """

        self._submitted_task_id = submitted_task_id

    @property
    def port(self):
        """Gets the port of this DataTransferMethodExt.  # noqa: E501


        :return: The port of this DataTransferMethodExt.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DataTransferMethodExt.


        :param port: The port of this DataTransferMethodExt.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def node_ip_address(self):
        """Gets the node_ip_address of this DataTransferMethodExt.  # noqa: E501


        :return: The node_ip_address of this DataTransferMethodExt.  # noqa: E501
        :rtype: str
        """
        return self._node_ip_address

    @node_ip_address.setter
    def node_ip_address(self, node_ip_address):
        """Sets the node_ip_address of this DataTransferMethodExt.


        :param node_ip_address: The node_ip_address of this DataTransferMethodExt.  # noqa: E501
        :type: str
        """

        self._node_ip_address = node_ip_address

    @property
    def node_port(self):
        """Gets the node_port of this DataTransferMethodExt.  # noqa: E501


        :return: The node_port of this DataTransferMethodExt.  # noqa: E501
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this DataTransferMethodExt.


        :param node_port: The node_port of this DataTransferMethodExt.  # noqa: E501
        :type: int
        """

        self._node_port = node_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataTransferMethodExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataTransferMethodExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
