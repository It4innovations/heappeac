# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.0  # noqa: E501

    OpenAPI spec version: v4.2.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterAuthenticationCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'username': 'str',
        'password': 'str',
        'private_key_file': 'str',
        'private_key_password': 'str',
        'authentication_type': 'ClusterAuthenticationCredentialsAuthType',
        'cipher_type': 'FileTransferCipherType',
        'public_key_fingerprint': 'str',
        'is_generated': 'bool',
        'is_deleted': 'bool',
        'cluster_project_credentials': 'list[ClusterProjectCredential]'
    }

    attribute_map = {
        'id': 'Id',
        'username': 'Username',
        'password': 'Password',
        'private_key_file': 'PrivateKeyFile',
        'private_key_password': 'PrivateKeyPassword',
        'authentication_type': 'AuthenticationType',
        'cipher_type': 'CipherType',
        'public_key_fingerprint': 'PublicKeyFingerprint',
        'is_generated': 'IsGenerated',
        'is_deleted': 'IsDeleted',
        'cluster_project_credentials': 'ClusterProjectCredentials'
    }

    def __init__(self, id=None, username=None, password=None, private_key_file=None, private_key_password=None, authentication_type=None, cipher_type=None, public_key_fingerprint=None, is_generated=None, is_deleted=None, cluster_project_credentials=None):  # noqa: E501
        """ClusterAuthenticationCredentials - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._username = None
        self._password = None
        self._private_key_file = None
        self._private_key_password = None
        self._authentication_type = None
        self._cipher_type = None
        self._public_key_fingerprint = None
        self._is_generated = None
        self._is_deleted = None
        self._cluster_project_credentials = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.username = username
        if password is not None:
            self.password = password
        if private_key_file is not None:
            self.private_key_file = private_key_file
        if private_key_password is not None:
            self.private_key_password = private_key_password
        self.authentication_type = authentication_type
        self.cipher_type = cipher_type
        if public_key_fingerprint is not None:
            self.public_key_fingerprint = public_key_fingerprint
        self.is_generated = is_generated
        self.is_deleted = is_deleted
        if cluster_project_credentials is not None:
            self.cluster_project_credentials = cluster_project_credentials

    @property
    def id(self):
        """Gets the id of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The id of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterAuthenticationCredentials.


        :param id: The id of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The username of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ClusterAuthenticationCredentials.


        :param username: The username of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The password of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ClusterAuthenticationCredentials.


        :param password: The password of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def private_key_file(self):
        """Gets the private_key_file of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The private_key_file of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: str
        """
        return self._private_key_file

    @private_key_file.setter
    def private_key_file(self, private_key_file):
        """Sets the private_key_file of this ClusterAuthenticationCredentials.


        :param private_key_file: The private_key_file of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: str
        """

        self._private_key_file = private_key_file

    @property
    def private_key_password(self):
        """Gets the private_key_password of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The private_key_password of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this ClusterAuthenticationCredentials.


        :param private_key_password: The private_key_password of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: str
        """

        self._private_key_password = private_key_password

    @property
    def authentication_type(self):
        """Gets the authentication_type of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The authentication_type of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: ClusterAuthenticationCredentialsAuthType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this ClusterAuthenticationCredentials.


        :param authentication_type: The authentication_type of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: ClusterAuthenticationCredentialsAuthType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")  # noqa: E501

        self._authentication_type = authentication_type

    @property
    def cipher_type(self):
        """Gets the cipher_type of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The cipher_type of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: FileTransferCipherType
        """
        return self._cipher_type

    @cipher_type.setter
    def cipher_type(self, cipher_type):
        """Sets the cipher_type of this ClusterAuthenticationCredentials.


        :param cipher_type: The cipher_type of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: FileTransferCipherType
        """
        if cipher_type is None:
            raise ValueError("Invalid value for `cipher_type`, must not be `None`")  # noqa: E501

        self._cipher_type = cipher_type

    @property
    def public_key_fingerprint(self):
        """Gets the public_key_fingerprint of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The public_key_fingerprint of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: str
        """
        return self._public_key_fingerprint

    @public_key_fingerprint.setter
    def public_key_fingerprint(self, public_key_fingerprint):
        """Sets the public_key_fingerprint of this ClusterAuthenticationCredentials.


        :param public_key_fingerprint: The public_key_fingerprint of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: str
        """

        self._public_key_fingerprint = public_key_fingerprint

    @property
    def is_generated(self):
        """Gets the is_generated of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The is_generated of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: bool
        """
        return self._is_generated

    @is_generated.setter
    def is_generated(self, is_generated):
        """Sets the is_generated of this ClusterAuthenticationCredentials.


        :param is_generated: The is_generated of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: bool
        """
        if is_generated is None:
            raise ValueError("Invalid value for `is_generated`, must not be `None`")  # noqa: E501

        self._is_generated = is_generated

    @property
    def is_deleted(self):
        """Gets the is_deleted of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The is_deleted of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this ClusterAuthenticationCredentials.


        :param is_deleted: The is_deleted of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def cluster_project_credentials(self):
        """Gets the cluster_project_credentials of this ClusterAuthenticationCredentials.  # noqa: E501


        :return: The cluster_project_credentials of this ClusterAuthenticationCredentials.  # noqa: E501
        :rtype: list[ClusterProjectCredential]
        """
        return self._cluster_project_credentials

    @cluster_project_credentials.setter
    def cluster_project_credentials(self, cluster_project_credentials):
        """Sets the cluster_project_credentials of this ClusterAuthenticationCredentials.


        :param cluster_project_credentials: The cluster_project_credentials of this ClusterAuthenticationCredentials.  # noqa: E501
        :type: list[ClusterProjectCredential]
        """

        self._cluster_project_credentials = cluster_project_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterAuthenticationCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterAuthenticationCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
