# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.0  # noqa: E501

    OpenAPI spec version: v4.2.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobStateAggregationReportExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_state_id': 'JobStateExt',
        'job_state_name': 'str',
        'count': 'int'
    }

    attribute_map = {
        'job_state_id': 'JobStateId',
        'job_state_name': 'JobStateName',
        'count': 'Count'
    }

    def __init__(self, job_state_id=None, job_state_name=None, count=None):  # noqa: E501
        """JobStateAggregationReportExt - a model defined in Swagger"""  # noqa: E501
        self._job_state_id = None
        self._job_state_name = None
        self._count = None
        self.discriminator = None
        if job_state_id is not None:
            self.job_state_id = job_state_id
        if job_state_name is not None:
            self.job_state_name = job_state_name
        if count is not None:
            self.count = count

    @property
    def job_state_id(self):
        """Gets the job_state_id of this JobStateAggregationReportExt.  # noqa: E501


        :return: The job_state_id of this JobStateAggregationReportExt.  # noqa: E501
        :rtype: JobStateExt
        """
        return self._job_state_id

    @job_state_id.setter
    def job_state_id(self, job_state_id):
        """Sets the job_state_id of this JobStateAggregationReportExt.


        :param job_state_id: The job_state_id of this JobStateAggregationReportExt.  # noqa: E501
        :type: JobStateExt
        """

        self._job_state_id = job_state_id

    @property
    def job_state_name(self):
        """Gets the job_state_name of this JobStateAggregationReportExt.  # noqa: E501


        :return: The job_state_name of this JobStateAggregationReportExt.  # noqa: E501
        :rtype: str
        """
        return self._job_state_name

    @job_state_name.setter
    def job_state_name(self, job_state_name):
        """Sets the job_state_name of this JobStateAggregationReportExt.


        :param job_state_name: The job_state_name of this JobStateAggregationReportExt.  # noqa: E501
        :type: str
        """

        self._job_state_name = job_state_name

    @property
    def count(self):
        """Gets the count of this JobStateAggregationReportExt.  # noqa: E501


        :return: The count of this JobStateAggregationReportExt.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this JobStateAggregationReportExt.


        :param count: The count of this JobStateAggregationReportExt.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobStateAggregationReportExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobStateAggregationReportExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
