# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.0  # noqa: E501

    OpenAPI spec version: v4.2.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstanceInformationExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'version': 'str',
        'deployed_ip_address': 'str',
        'port': 'int',
        'url': 'str',
        'url_postfix': 'str',
        'deployment_type': 'DeploymentTypeExt',
        'resource_allocation_types': 'list[ResourceAllocationTypeExt]',
        'projects': 'list[ExtendedProjectInfoExt]'
    }

    attribute_map = {
        'name': 'Name',
        'description': 'Description',
        'version': 'Version',
        'deployed_ip_address': 'DeployedIPAddress',
        'port': 'Port',
        'url': 'URL',
        'url_postfix': 'URLPostfix',
        'deployment_type': 'DeploymentType',
        'resource_allocation_types': 'ResourceAllocationTypes',
        'projects': 'Projects'
    }

    def __init__(self, name=None, description=None, version=None, deployed_ip_address=None, port=None, url=None, url_postfix=None, deployment_type=None, resource_allocation_types=None, projects=None):  # noqa: E501
        """InstanceInformationExt - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._version = None
        self._deployed_ip_address = None
        self._port = None
        self._url = None
        self._url_postfix = None
        self._deployment_type = None
        self._resource_allocation_types = None
        self._projects = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if deployed_ip_address is not None:
            self.deployed_ip_address = deployed_ip_address
        if port is not None:
            self.port = port
        if url is not None:
            self.url = url
        if url_postfix is not None:
            self.url_postfix = url_postfix
        if deployment_type is not None:
            self.deployment_type = deployment_type
        if resource_allocation_types is not None:
            self.resource_allocation_types = resource_allocation_types
        if projects is not None:
            self.projects = projects

    @property
    def name(self):
        """Gets the name of this InstanceInformationExt.  # noqa: E501


        :return: The name of this InstanceInformationExt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceInformationExt.


        :param name: The name of this InstanceInformationExt.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this InstanceInformationExt.  # noqa: E501


        :return: The description of this InstanceInformationExt.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InstanceInformationExt.


        :param description: The description of this InstanceInformationExt.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this InstanceInformationExt.  # noqa: E501


        :return: The version of this InstanceInformationExt.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InstanceInformationExt.


        :param version: The version of this InstanceInformationExt.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def deployed_ip_address(self):
        """Gets the deployed_ip_address of this InstanceInformationExt.  # noqa: E501


        :return: The deployed_ip_address of this InstanceInformationExt.  # noqa: E501
        :rtype: str
        """
        return self._deployed_ip_address

    @deployed_ip_address.setter
    def deployed_ip_address(self, deployed_ip_address):
        """Sets the deployed_ip_address of this InstanceInformationExt.


        :param deployed_ip_address: The deployed_ip_address of this InstanceInformationExt.  # noqa: E501
        :type: str
        """

        self._deployed_ip_address = deployed_ip_address

    @property
    def port(self):
        """Gets the port of this InstanceInformationExt.  # noqa: E501


        :return: The port of this InstanceInformationExt.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this InstanceInformationExt.


        :param port: The port of this InstanceInformationExt.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def url(self):
        """Gets the url of this InstanceInformationExt.  # noqa: E501


        :return: The url of this InstanceInformationExt.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InstanceInformationExt.


        :param url: The url of this InstanceInformationExt.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_postfix(self):
        """Gets the url_postfix of this InstanceInformationExt.  # noqa: E501


        :return: The url_postfix of this InstanceInformationExt.  # noqa: E501
        :rtype: str
        """
        return self._url_postfix

    @url_postfix.setter
    def url_postfix(self, url_postfix):
        """Sets the url_postfix of this InstanceInformationExt.


        :param url_postfix: The url_postfix of this InstanceInformationExt.  # noqa: E501
        :type: str
        """

        self._url_postfix = url_postfix

    @property
    def deployment_type(self):
        """Gets the deployment_type of this InstanceInformationExt.  # noqa: E501


        :return: The deployment_type of this InstanceInformationExt.  # noqa: E501
        :rtype: DeploymentTypeExt
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this InstanceInformationExt.


        :param deployment_type: The deployment_type of this InstanceInformationExt.  # noqa: E501
        :type: DeploymentTypeExt
        """

        self._deployment_type = deployment_type

    @property
    def resource_allocation_types(self):
        """Gets the resource_allocation_types of this InstanceInformationExt.  # noqa: E501


        :return: The resource_allocation_types of this InstanceInformationExt.  # noqa: E501
        :rtype: list[ResourceAllocationTypeExt]
        """
        return self._resource_allocation_types

    @resource_allocation_types.setter
    def resource_allocation_types(self, resource_allocation_types):
        """Sets the resource_allocation_types of this InstanceInformationExt.


        :param resource_allocation_types: The resource_allocation_types of this InstanceInformationExt.  # noqa: E501
        :type: list[ResourceAllocationTypeExt]
        """

        self._resource_allocation_types = resource_allocation_types

    @property
    def projects(self):
        """Gets the projects of this InstanceInformationExt.  # noqa: E501


        :return: The projects of this InstanceInformationExt.  # noqa: E501
        :rtype: list[ExtendedProjectInfoExt]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this InstanceInformationExt.


        :param projects: The projects of this InstanceInformationExt.  # noqa: E501
        :type: list[ExtendedProjectInfoExt]
        """

        self._projects = projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceInformationExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceInformationExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
