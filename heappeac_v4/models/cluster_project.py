# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.0  # noqa: E501

    OpenAPI spec version: v4.2.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cluster_id': 'int',
        'cluster': 'Cluster',
        'project_id': 'int',
        'project': 'Project',
        'local_basepath': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'is_deleted': 'bool',
        'cluster_project_credentials': 'list[ClusterProjectCredential]'
    }

    attribute_map = {
        'id': 'Id',
        'cluster_id': 'ClusterId',
        'cluster': 'Cluster',
        'project_id': 'ProjectId',
        'project': 'Project',
        'local_basepath': 'LocalBasepath',
        'created_at': 'CreatedAt',
        'modified_at': 'ModifiedAt',
        'is_deleted': 'IsDeleted',
        'cluster_project_credentials': 'ClusterProjectCredentials'
    }

    def __init__(self, id=None, cluster_id=None, cluster=None, project_id=None, project=None, local_basepath=None, created_at=None, modified_at=None, is_deleted=None, cluster_project_credentials=None):  # noqa: E501
        """ClusterProject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cluster_id = None
        self._cluster = None
        self._project_id = None
        self._project = None
        self._local_basepath = None
        self._created_at = None
        self._modified_at = None
        self._is_deleted = None
        self._cluster_project_credentials = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cluster is not None:
            self.cluster = cluster
        if project_id is not None:
            self.project_id = project_id
        if project is not None:
            self.project = project
        self.local_basepath = local_basepath
        self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        self.is_deleted = is_deleted
        if cluster_project_credentials is not None:
            self.cluster_project_credentials = cluster_project_credentials

    @property
    def id(self):
        """Gets the id of this ClusterProject.  # noqa: E501


        :return: The id of this ClusterProject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterProject.


        :param id: The id of this ClusterProject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterProject.  # noqa: E501


        :return: The cluster_id of this ClusterProject.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterProject.


        :param cluster_id: The cluster_id of this ClusterProject.  # noqa: E501
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def cluster(self):
        """Gets the cluster of this ClusterProject.  # noqa: E501


        :return: The cluster of this ClusterProject.  # noqa: E501
        :rtype: Cluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ClusterProject.


        :param cluster: The cluster of this ClusterProject.  # noqa: E501
        :type: Cluster
        """

        self._cluster = cluster

    @property
    def project_id(self):
        """Gets the project_id of this ClusterProject.  # noqa: E501


        :return: The project_id of this ClusterProject.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ClusterProject.


        :param project_id: The project_id of this ClusterProject.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project(self):
        """Gets the project of this ClusterProject.  # noqa: E501


        :return: The project of this ClusterProject.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ClusterProject.


        :param project: The project of this ClusterProject.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def local_basepath(self):
        """Gets the local_basepath of this ClusterProject.  # noqa: E501


        :return: The local_basepath of this ClusterProject.  # noqa: E501
        :rtype: str
        """
        return self._local_basepath

    @local_basepath.setter
    def local_basepath(self, local_basepath):
        """Sets the local_basepath of this ClusterProject.


        :param local_basepath: The local_basepath of this ClusterProject.  # noqa: E501
        :type: str
        """
        if local_basepath is None:
            raise ValueError("Invalid value for `local_basepath`, must not be `None`")  # noqa: E501

        self._local_basepath = local_basepath

    @property
    def created_at(self):
        """Gets the created_at of this ClusterProject.  # noqa: E501


        :return: The created_at of this ClusterProject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ClusterProject.


        :param created_at: The created_at of this ClusterProject.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this ClusterProject.  # noqa: E501


        :return: The modified_at of this ClusterProject.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this ClusterProject.


        :param modified_at: The modified_at of this ClusterProject.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def is_deleted(self):
        """Gets the is_deleted of this ClusterProject.  # noqa: E501


        :return: The is_deleted of this ClusterProject.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this ClusterProject.


        :param is_deleted: The is_deleted of this ClusterProject.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def cluster_project_credentials(self):
        """Gets the cluster_project_credentials of this ClusterProject.  # noqa: E501


        :return: The cluster_project_credentials of this ClusterProject.  # noqa: E501
        :rtype: list[ClusterProjectCredential]
        """
        return self._cluster_project_credentials

    @cluster_project_credentials.setter
    def cluster_project_credentials(self, cluster_project_credentials):
        """Sets the cluster_project_credentials of this ClusterProject.


        :param cluster_project_credentials: The cluster_project_credentials of this ClusterProject.  # noqa: E501
        :type: list[ClusterProjectCredential]
        """

        self._cluster_project_credentials = cluster_project_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
