# coding: utf-8

"""
    HEAppE Web API

    HEAppE middleware API v4.2.1  # noqa: E501

    OpenAPI spec version: v4.2.1
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtendedCommandTemplateExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'extended_allocation_command': 'str',
        'executable_file': 'str',
        'preparation_script': 'str',
        'command_parameters': 'str',
        'is_generic': 'bool',
        'project_id': 'int',
        'cluster_node_type_id': 'int',
        'template_parameters': 'list[ExtendedCommandTemplateParameterExt]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'extended_allocation_command': 'ExtendedAllocationCommand',
        'executable_file': 'ExecutableFile',
        'preparation_script': 'PreparationScript',
        'command_parameters': 'CommandParameters',
        'is_generic': 'IsGeneric',
        'project_id': 'ProjectId',
        'cluster_node_type_id': 'ClusterNodeTypeId',
        'template_parameters': 'TemplateParameters'
    }

    def __init__(self, id=None, name=None, description=None, extended_allocation_command=None, executable_file=None, preparation_script=None, command_parameters=None, is_generic=None, project_id=None, cluster_node_type_id=None, template_parameters=None):  # noqa: E501
        """ExtendedCommandTemplateExt - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._extended_allocation_command = None
        self._executable_file = None
        self._preparation_script = None
        self._command_parameters = None
        self._is_generic = None
        self._project_id = None
        self._cluster_node_type_id = None
        self._template_parameters = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if extended_allocation_command is not None:
            self.extended_allocation_command = extended_allocation_command
        if executable_file is not None:
            self.executable_file = executable_file
        if preparation_script is not None:
            self.preparation_script = preparation_script
        if command_parameters is not None:
            self.command_parameters = command_parameters
        if is_generic is not None:
            self.is_generic = is_generic
        if project_id is not None:
            self.project_id = project_id
        if cluster_node_type_id is not None:
            self.cluster_node_type_id = cluster_node_type_id
        if template_parameters is not None:
            self.template_parameters = template_parameters

    @property
    def id(self):
        """Gets the id of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The id of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedCommandTemplateExt.


        :param id: The id of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The name of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtendedCommandTemplateExt.


        :param name: The name of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The description of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExtendedCommandTemplateExt.


        :param description: The description of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def extended_allocation_command(self):
        """Gets the extended_allocation_command of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The extended_allocation_command of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: str
        """
        return self._extended_allocation_command

    @extended_allocation_command.setter
    def extended_allocation_command(self, extended_allocation_command):
        """Sets the extended_allocation_command of this ExtendedCommandTemplateExt.


        :param extended_allocation_command: The extended_allocation_command of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: str
        """

        self._extended_allocation_command = extended_allocation_command

    @property
    def executable_file(self):
        """Gets the executable_file of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The executable_file of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: str
        """
        return self._executable_file

    @executable_file.setter
    def executable_file(self, executable_file):
        """Sets the executable_file of this ExtendedCommandTemplateExt.


        :param executable_file: The executable_file of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: str
        """

        self._executable_file = executable_file

    @property
    def preparation_script(self):
        """Gets the preparation_script of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The preparation_script of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: str
        """
        return self._preparation_script

    @preparation_script.setter
    def preparation_script(self, preparation_script):
        """Sets the preparation_script of this ExtendedCommandTemplateExt.


        :param preparation_script: The preparation_script of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: str
        """

        self._preparation_script = preparation_script

    @property
    def command_parameters(self):
        """Gets the command_parameters of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The command_parameters of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: str
        """
        return self._command_parameters

    @command_parameters.setter
    def command_parameters(self, command_parameters):
        """Sets the command_parameters of this ExtendedCommandTemplateExt.


        :param command_parameters: The command_parameters of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: str
        """

        self._command_parameters = command_parameters

    @property
    def is_generic(self):
        """Gets the is_generic of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The is_generic of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: bool
        """
        return self._is_generic

    @is_generic.setter
    def is_generic(self, is_generic):
        """Sets the is_generic of this ExtendedCommandTemplateExt.


        :param is_generic: The is_generic of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: bool
        """

        self._is_generic = is_generic

    @property
    def project_id(self):
        """Gets the project_id of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The project_id of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ExtendedCommandTemplateExt.


        :param project_id: The project_id of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def cluster_node_type_id(self):
        """Gets the cluster_node_type_id of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The cluster_node_type_id of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: int
        """
        return self._cluster_node_type_id

    @cluster_node_type_id.setter
    def cluster_node_type_id(self, cluster_node_type_id):
        """Sets the cluster_node_type_id of this ExtendedCommandTemplateExt.


        :param cluster_node_type_id: The cluster_node_type_id of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: int
        """

        self._cluster_node_type_id = cluster_node_type_id

    @property
    def template_parameters(self):
        """Gets the template_parameters of this ExtendedCommandTemplateExt.  # noqa: E501


        :return: The template_parameters of this ExtendedCommandTemplateExt.  # noqa: E501
        :rtype: list[ExtendedCommandTemplateParameterExt]
        """
        return self._template_parameters

    @template_parameters.setter
    def template_parameters(self, template_parameters):
        """Sets the template_parameters of this ExtendedCommandTemplateExt.


        :param template_parameters: The template_parameters of this ExtendedCommandTemplateExt.  # noqa: E501
        :type: list[ExtendedCommandTemplateParameterExt]
        """

        self._template_parameters = template_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedCommandTemplateExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedCommandTemplateExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
